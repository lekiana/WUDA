name: CI/CD

on: [push]

env:
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  PORT: ${{ secrets.PORT }}
  JWT_KEY: ${{ secrets.JWT_KEY }}
  BACKEND_HOSTNAME: ${{ secrets.BACKEND_HOSTNAME }}
  BACKEND_PORT: ${{ secrets.BACKEND_PORT }}
  SECRET_KEY: ${{ secrets.SECRET_KEY }}
  SERVER_PORT: ${{ secrets.SERVER_PORT }}
  APP_PORT: ${{ secrets.APP_PORT }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    # PYTHON SETUP    
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r front-end/requirements.txt
        pip install -r back-end/requirements.txt

    # VULNERABILITY & LINT
    - name: Run Bandit scan
      continue-on-error: true
      run: |
        pip install bandit
        bandit -r back-end
        bandit -r front-end

    - name: Run pip-audit scan
      continue-on-error: true
      run: |
        pip install pip-audit
        pip-audit -r front-end/requirements.txt
        pip-audit -r back-end/requirements.txt

    - name: Analysing the code with pylint
      continue-on-error: true
      run: |
        pip install pylint
        pylint $(git ls-files '*.py')

    # TESTS
    - name: Run back-end tests
      run: |
        pip install pytest
        pip install -r back-end/requirements_test.txt
        pytest back-end/test_app.py

    - name: Run front-end tests
      run: |
        pip install pytest
        pip install -r front-end/requirements_test.txt
        pytest front-end/test_app.py

    # DOCKER
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # BACK-END
    - name: Build and push Docker image for back-end
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/back-end:latest back-end/
        docker push ghcr.io/${{ github.repository_owner }}/back-end:latest

    # FRONT-END
    - name: Build and push Docker image for front-end
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/front-end:latest front-end/
        docker push ghcr.io/${{ github.repository_owner }}/front-end:latest
